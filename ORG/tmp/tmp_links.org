* translate : 
** from ru
#+begin_src translate 
голюцинации
#+end_src

#+RESULTS:
: hollucinations


** from en
#+begin_src translate :dest ru
: hallucinations
#+end_src

#+RESULTS:
: : галлюцинации
* link to 
[[file:d:/Development/lisp/Dropbox/orgs/capture/holodeck.org::*Dredgers][Dredgers]]
* Give 
* Texts
#+begin_src dot :file e:\Temp\my-dot-diagram.png :cmdline -Kdot -Tpng
graph graphname { 
		a -- b; 
		b -- c;
		b -- d;
		d -- a;
	} 
#+end_src

#+RESULTS:
[[file:e:\Temp\my-dot-diagram.png]]

* Calc 
** sandbox
*** (* (/ : 
#+BEGIN_SRC elisp
(* 
	(/ 0.02 100)
	1000000
	)
#+END_SRC

#+RESULTS:
: 200.0

#+BEGIN_SRC elisp
(/ 
	5000
	220
	)
#+END_SRC

#+RESULTS:
: 22


#+BEGIN_SRC elisp
(+ 
	(* 200 36)
	(* 1000 25)
	(* 2000 15)
	(* 5000 8)
	(* 20000 5)
	)
#+END_SRC

		#+RESULTS:
		: 202200
		

#+BEGIN_SRC calc :var a=2 b=9 c=64 x=5
((a+b)^3 + sqrt(c)) / (2x+1)
#+END_SRC

#+begin_src emacs-lisp :tangle yes
(setq сутки10 100)
(setq час10 100)
(setq минут10 100)
(setq сутки12 24)
(setq час12 60)
(setq минут12 60)
#+end_src

#+RESULTS:
: 60

#+begin_src emacs-lisp :tangle yes
(setq cof24 (/ сутки10 сутки12))
#+end_src

#+RESULTS:
: 4

#+begin_src emacs-lisp :tangle yes
(setq cof10 (/  сутки12 сутки10))
#+end_src

#+RESULTS:
: 0

#+begin_src emacs-lisp :tangle yes
(* сутки10 cof10)
#+end_src

#+RESULTS:
: 0
*** (/ : 
#+BEGIN_SRC elisp
	(- (/ 40000 12) (/ 30000 12))
#+END_SRC

#+RESULTS:
: 833
*** $
#+BEGIN_SRC elisp
(* 
	(/
	 30000
	 12)
	30
	)
#+END_SRC

#+RESULTS:
: 75000

** Conveert 
(format "%x" 1000)  ; decimal to hex. Returns a
(format "%d" #xe8) ; hex a to decimal. Returns 10.
** run 
(calc)
*** doc
**** Hex\dec
    Type any number. For example, 10.
    Type “d6” to turn the display into hexadecimal form.
    Type “d0” to turn the display into decimal form.

* read
** 
* AI 
** Hello profesor!
toggle-debug-on-error

* progn 
#+begin_src emacs-lisp results output silent
(setq org-hide-leading-stars t)
(setq ac-auto-start nil)
(setq ac-auto-show-menu nil)
;; (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)  
(setq org-adapt-indentation nil)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :tangle yes
(use-package jedi 
	:ensure t
	;; :init
	;; (elpy-enable)
	:config
	;; (defun my/python-mode-hook ()
	;; (add-to-list 'company-backends 'company-jedi))
	;; (add-hook 'python-mode-hook 'my/python-mode-hook)
	;; (define-key evil-insert-state-map (kbd "C-SPC") 'company-jedi)
	(add-hook 'python-mode-hook 'jedi:setup)
	(setq jedi:complete-on-dot t)  
	)
#+end_src
* tmp 
